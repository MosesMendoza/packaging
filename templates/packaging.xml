<?xml version='1.0' encoding='UTF-8'?>
<matrix-project>
  <actions/>
  <description>&lt;p&gt;&#xd;
Dynamically Created Packaging Job for a packaging repo-compatible project.&#xd;
Intended to be triggered from within a project with the packaging repo&#xd;
bootstrapped.&#xd;
&lt;/p&gt;&#xd;
&lt;p&gt;&#xd;
Three parameters are expected:&#xd;
&lt;/p&gt;&#xd;
1) File: A build parameters file that describes information about the build state&#xd;
&lt;br&gt;&#xd;
2) File: A tar.gz of a git bundle, created by the packaging repo, of the&#xd;
current state of the project to be packaged&#xd;
&lt;/br&gt;&#xd;
&lt;br&gt;&#xd;
3) String: The project, e.g. facter, puppet&#xd;
&lt;/br&gt;&#xd;
&lt;p&gt;&#xd;
This job will be triggered automatically after generation by the packaging&#xd;
repo.&#xd;
&lt;br&gt;&#xd;
To trigger a downstream job after completion, pass DOWNSTREAM_JOB=$URI with the invokation, e.g.&#xd;
&lt;/br&gt;&#xd;
&lt;p&gt;&#xd;
pl:jenkins:deb DOWNSTREAM_JOB=http://jenkins-release.delivery.puppetlabs.net/job/puppetlabs-packaging-downstream-test/build&#xd;
&lt;/p&gt;&#xd;
&lt;p&gt;&#xd;
  Successful completion of packaging will result in the automatic creation of&#xd;
  apt/yum repositories on the distribution server with the built packages.  To&#xd;
  generate client apt/yum repository config files for accessing these packages,&#xd;
  check out the ref of the git sha that was packaged, and run `rake&#xd;
  pl:jenkins:(deb|rpm)_repo_configs`. Configuration files will be generated and&#xd;
  deposited locally in pkg/repo_configs.&#xd;
&lt;/p&gt;&#xd;
&#xd;
&#xd;
  &#xd;
</description>
  <logRotator class="hudson.tasks.LogRotator">
    <daysToKeep>10</daysToKeep>
    <numToKeep>-1</numToKeep>
    <artifactDaysToKeep>-1</artifactDaysToKeep>
    <artifactNumToKeep>-1</artifactNumToKeep>
  </logRotator>
  <keepDependencies>false</keepDependencies>
  <properties>
    <jp.ikedam.jenkins.plugins.groovy__label__assignment.GroovyLabelAssignmentProperty plugin="groovy-label-assignment@1.0.0">
      <groovyScript>def labelMap = [
      &quot;pl:deb COW=base-lucid-i386.cow&quot;: &quot;deb&quot;,
      &quot;pl:mock MOCK=pl-el-5-i386&quot;: &quot;rpm&quot;,
];
return labelMap.get(binding.getVariables().get(&quot;command&quot;));</groovyScript>
    </jp.ikedam.jenkins.plugins.groovy__label__assignment.GroovyLabelAssignmentProperty>
    <jenkins.plugins.hipchat.HipChatNotifier_-HipChatJobProperty plugin="hipchat-plugin@0.1.0">
      <room></room>
      <startNotification>false</startNotification>
    </jenkins.plugins.hipchat.HipChatNotifier_-HipChatJobProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.FileParameterDefinition>
          <name>BUILD_PROPERTIES</name>
          <description></description>
        </hudson.model.FileParameterDefinition>
        <hudson.model.FileParameterDefinition>
          <name>PROJECT_BUNDLE</name>
          <description></description>
        </hudson.model.FileParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>PROJECT</name>
          <description></description>
          <defaultValue></defaultValue>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers class="vector"/>
  <concurrentBuild>false</concurrentBuild>
  <axes>
    <hudson.matrix.TextAxis>
      <name>command</name>
      <values>
        <string>pl:deb COW=base-lucid-i386.cow</string>
        <string>pl:mock MOCK=pl-el-5-i386</string>
      </values>
    </hudson.matrix.TextAxis>
  </axes>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/bin/bash

SHA=$(echo $BUILD_PROPERTIES | cut -d &apos;.&apos; -f1)

### Create a local clone of the git-bundle that was passed
# The bundle is a tarball, and since this is a project-agnostic
# job, we don&apos;t actually know what&apos;s in it, just that it&apos;s a
# git bundle.
#

[ -f &quot;PROJECT_BUNDLE&quot; ] || exit 1
mkdir project &amp;&amp; tar -xzf PROJECT_BUNDLE -C project/

pushd project
  git clone --recursive $(ls) git_repo
  
  pushd git_repo
    
    ### Clone the packaging repo
    rake package:bootstrap

    ### Perform the build
    rake $command PARAMS_FILE=$WORKSPACE/BUILD_PROPERTIES --trace

    ### Send the results
    rake pl:jenkins:ship[&quot;artifacts&quot;] PARAMS_FILE=$WORKSPACE/BUILD_PROPERTIES --trace
    
  popd
popd

echo &quot;
REF=$SHA
PROJECT=$PROJECT&quot; &gt; build.properties</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.plugins.parameterizedtrigger.BuildTrigger plugin="parameterized-trigger@2.16">
      <configs>
        <hudson.plugins.parameterizedtrigger.BuildTriggerConfig>
          <configs>
            <hudson.plugins.parameterizedtrigger.FileBuildParameters>
              <propertiesFile>build.properties</propertiesFile>
            </hudson.plugins.parameterizedtrigger.FileBuildParameters>
          </configs>
          <projects>dynamic_repo_creation, </projects>
          <condition>SUCCESS</condition>
          <triggerWithNoParameters>false</triggerWithNoParameters>
        </hudson.plugins.parameterizedtrigger.BuildTriggerConfig>
      </configs>
    </hudson.plugins.parameterizedtrigger.BuildTrigger>
  </publishers>
  <buildWrappers>
    <hudson.plugins.build__timeout.BuildTimeoutWrapper plugin="build-timeout@1.11">
      <timeoutMinutes>30</timeoutMinutes>
      <failBuild>false</failBuild>
      <writingDescription>false</writingDescription>
      <timeoutPercentage>0</timeoutPercentage>
      <timeoutType>absolute</timeoutType>
      <timeoutMinutesElasticDefault>3</timeoutMinutesElasticDefault>
    </hudson.plugins.build__timeout.BuildTimeoutWrapper>
    <hudson.plugins.ansicolor.AnsiColorBuildWrapper plugin="ansicolor@0.3.1">
      <colorMapName>xterm</colorMapName>
    </hudson.plugins.ansicolor.AnsiColorBuildWrapper>
  </buildWrappers>
  <executionStrategy class="hudson.matrix.DefaultMatrixExecutionStrategyImpl">
    <runSequentially>false</runSequentially>
  </executionStrategy>
</matrix-project>
